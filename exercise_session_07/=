# Exercise Sheet 07 (Dennys Huber)

### Exercise 1
- Due to Ssend being a blocking function every process was blocked and couldn't send to the next process, which was sending to and therefore also blocked. Resulting in a deadlock.
- Yes it does solve the issue. See [here](https://github.com/devnnys/hpc_esc_401_solutions/blob/main/exercise_session_07/ring_and_deadlocks/ring_blocking.c) because now only the odd or even processes are blocked and the receiving odd or even proceses are able to receive the message.
- It's not an optimal solution, because only have of the processes are send there message.
- Maybe we can devide it even more or use non blocking send and receive.

- The non-blocking version can be found [here](https://github.com/devnnys/hpc_esc_401_solutions/blob/main/exercise_session_07/ring_and_deadlocks/ring_non_blocking.c)
- Because we just have a integer that we send the buffer is big enough so we can receive and send at the same time.
- So every process can send instead of just half.

- The __bonus__ exercise can be found [here](https://github.com/devnnys/hpc_esc_401_solutions/blob/main/exercise_session_07/ring_and_deadlocks/ring_cart.c)

### Exercise 2
- My solution can be found [here](https://github.com/devnnys/hpc_esc_401_solutions/blob/main/exercise_session_07/pi/leibnitz.c).
- And my approximation of pi is 3.1415926526

### Exercise 3
- The solution code can be found [here](https://github.com/devnnys/hpc_esc_401_solutions/tree/main/exercise_session_07/poisson_MPI_I). 
- Was not able to make it work properly. (Segmentation fault)
- The different versions are commented out inside the corresponding files.

### Exercise 4
- The provided executable didn't work for me -> Segmentation fault.

### Exercise 5
- The output file can be found [here](https://github.com/devnnys/hpc_esc_401_solutions/blob/main/exercise_session_07/perftools/nbody%2B29348-449s/rpt-files/RUNTIME.rpt).
- The output shows an analysis of your program.
- It contains information about:
	- Shows how each line of the code performed 
	- Shows how each function performed
	- How much energy was used.
	- MPI informations
	- Options to show more data and look at it interactively
- It can show you in which area you can improve your code's performance.
- It can also show how you can use your computer more efficiently.


